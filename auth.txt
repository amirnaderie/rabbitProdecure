const Joi = require('joi');
const bcrypt = require('bcrypt');
const _ = require('lodash');
const {User} = require('../models/user');
const mongoose = require('mongoose');
const express = require('express');
const jwt = require("jsonwebtoken");
const config = require("config");
const router = express.Router();

router.post('/', async (req, res) => {
  const { error } = validate(req.body); 
  if (error) return res.status(400).send(error.details[0].message);

  let user = await User.findOne({ email: req.body.email });
  if (!user) return res.status(400).send('Invalid email or password.');

  const validPassword = await bcrypt.compare(req.body.password, user.password);
  if (!validPassword) return res.status(400).send('Invalid email or password.');

  const token=await updateRefToken(req.body.email)

  res.send(token);
});

router.post('/refresh', async (req, res) => {
  try {
    const decoded = jwt.verify(req.body.refreshToken, config.get("jwtPrivateKey"));
   // let user = await User.findOne({ email: decoded.email });
   
  const token=updateRefToken(decoded.email);
    res.send(token);
  } catch (ex) {
    res.status(403).send("Invalid refreshToken.");

  }
  
});

function validate(req) {
  const schema = {
    email: Joi.string().min(5).max(255).required().email(),
    password: Joi.string().min(5).max(255).required()
  };

  return Joi.validate(req, schema);
}

async function updateRefToken(email) {
  let user = await User.findOne({ email: email });
  const token = user.generateAuthToken();
  const userU = await User.findByIdAndUpdate(
    user.id,
    { refreshToken: token.refreshToken },
    {
      new: true
    }
  );
  
  return token;
}


module.exports = router; 
